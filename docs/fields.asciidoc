
////
This file is generated! See etc/fields.yml and scripts/generate_field_docs.py
////

[[exported-fields]]
== Exported fields

This document describes the fields that are exported by the
Packetbeat shipper for each transaction. They are grouped in the
following categories:

* <<exported-fields-event>>
* <<exported-fields-http>>
* <<exported-fields-mysql>>
* <<exported-fields-pgsql>>
* <<exported-fields-thrift>>
* <<exported-fields-redis>>
* <<exported-fields-mongodb>>
* <<exported-fields-measurements>>
* <<exported-fields-env>>
* <<exported-fields-raw>>

[[exported-fields-event]]
=== Event fields

These fields contained data about the transaction itself.



==== timestamp

type: date

example: 2015-01-24 14:06:05.071000

format: YYYY-MM-DDTHH:MM:SS.milliZ

required: True

The timestamp of the event, as measured either by the shipper or by a common collector point. The precision is in milliseconds. The timezone is UTC.


==== type

required: True

The type of the transaction (e.g. HTTP, MySQL, Redis, RUM)


==== count

type: int

required: True

For how many transactions is this event representative. This is generally the inverse of the sampling rate. For example, for a sample rate of 1/10, the count is 10. The count is used by the UIs to return estimated values.


==== status

required: True

High level status of the transaction. The way to compute this value depends on the protocol, but the result has a meaning independent a meaning independent of the protocol.


==== method

The command/verb/method of the transaction. For HTTP, this is the method name (GET, POST, PUT, etc.), for SQL this is the verb (SELECT, UPDATE, DELETE, etc.).


==== resource

The logical resource that this transaction refers to. For HTTP, this is the URL path up to the last /. For example, if the URL is `/users/1`, the resource is `/users`. For databases, the resource is typically the table name. The field is not filled for all transaction types.


==== path

required: True

The path to which the transaction refers to. For HTTP, this is the URL. For SQL databases, this is the table name. For key-value stores, this is the key.


==== query

type: string

The query in a human readable form. For HTTP, it will typically be something like `GET /users/_search?name=test`. For MySQL, it is something like `SELECT id from users where name=test`.


==== params

The request parameters. For HTTP, these are the POST or GET parameters. For Thrift-RPC, these are the parameters from the request.


==== notes

Messages from Packetbeat itself. This usually contains error messages for interpreting the raw data which can be helpful for troubleshooting.


[[exported-fields-http]]
=== Http fields

HTTP specific event fields.


==== http.code

example: 404

HTTP status code.

==== http.phrase

example: Not found.

HTTP status phrase.

==== http.request_headers

type: dict

A map containing the captured header fields from the request. Which headers to capture is configurable. If more headers with the same header name are present in the message, they will be separated by comas.


==== http.response_headers

type: dict

A map containing the captured header fields from the response. Which headers to capture is configurable. If more headers with the same header name are present in the message, they will be separated by comas.


==== http.content_length

type: int

The value of the Content-Length header if present.


[[exported-fields-mysql]]
=== Mysql fields

MySQL specific event fields.


==== mysql.iserror

type: bool

In case the MySQL query returns an error, this field is set to true.


==== mysql.affected_rows

type: int

In case of a successful MySQL command, it contains the affected number of rows of the last statement.


==== mysql.insert_id

In case of a successful ``INSERT`` query, it contains the id of the newly inserted row.


==== mysql.num_fields

In case of a successful ``SELECT`` query, it is set to the number of fields returned.


==== mysql.num_rows

In case of a successful ``SELECT`` query, it is set to the number of rows returned.


==== mysql.query

The row mysql query as read from the transaction's request.


==== mysql.error_code

type: int

The error code returned by MySQL.


==== mysql.error_message

The error info message returned by MySQL.


[[exported-fields-pgsql]]
=== PostgreSQL fields

PostgreSQL specific event fields.


==== pgsql.query

The row pgsql query as read from the transaction's request.


==== pgsql.iserror

type: bool

In case the PgSQL query returns an error, this field is set to true.


==== pgsql.error_code

type: int

The PostgreSQL error code.

==== pgsql.error_message

The PostgreSQL error message.

==== pgsql.error_severity

The PostgreSQL error severity.

==== pgsql.num_fields

In case of a successful ``SELECT`` query, it is set to the number of fields returned.


==== pgsql.num_rows

In case of a successful ``SELECT`` query, it is set to the number of rows returned.


[[exported-fields-thrift]]
=== Thrift-RPC fields

Thrift-RPC specific event fields.


==== thrift.params

The RPC method call parameters in human readable format. If the IDL files are available, the parameters are using names whenever possible. Otherwise, the IDs from the message are used.


==== thrift.service

The name of the Thrift-RPC service as defined in the IDL files.


==== thrift.return_value

The value returned by the Thrift-RPC call. This is encoded in a human readable way.


==== thrift.exceptions

If the call resulted in exceptions, this field contains them in a human readable form


[[exported-fields-redis]]
=== Redis fields

Redis specific event fields.


==== redis.return_value

The return value of the Redis command in human readable form.


==== redis.error

If the Redis command has resulted in an error, this field contains the error message as returned by the Redis server.


[[exported-fields-mongodb]]
=== MongoDb fields

MongoDB specific event fields. These fields mirror closely the fields for the MongoDB wire protocol. The higher level fields (e.g. `query`, `resource`) apply to MongoDB events as well.



==== mongodb.error

If the MongoDB request has resulted in an error, this field contains the error message as returned by the server.


==== mongodb.fullCollectionName

The full collection name. The full collection name is the concatenation of the database name with the collection name, using a . for the concatenation. For example, for the database foo and the collection bar, the full collection name is foo.bar.


==== mongodb.numberToSkip

type: number

Sets the number of documents to omit - starting from the first document in the resulting dataset - when returning the result of the query.


==== mongodb.numberToReturn

type: number

The requested maximum number of documents to be returned.


==== mongodb.numberReturned

type: number

Number of documents in the reply


==== mongodb.startingFrom

Where in the cursor this reply is starting


==== mongodb.query

JSON document that represents the query. The query will contain one or more elements, all of which must match for a document to be included in the result set. Possible elements include $query, $orderby, $hint, $explain, and $snapshot.


==== mongodb.returnFieldsSelector

JSON document that limits the fields in the returned documents. The returnFieldsSelector contains one or more elements, each of which is the name of a field that should be returned, and and the integer value 1.


==== mongodb.selector

BSON document that specifies the query for selection of the document to update or delete.


==== mongodb.update

BSON document that specifies the update to be performed. For information on specifying updates see the Update Operations documentation from the MongoDB Manual.


==== mongodb.cursorId

Cursor identifier that came in the OP_REPLY. This must be the value that came from the database.


[[exported-fields-measurements]]
=== Measurements fields

These fields contain measurements related to the transaction.



==== responsetime

type: int

The wall clock time it took to for the transaction to complete. The precision is in microseconds.


==== cpu_time

type: int

The CPU time it took to complete the transaction.

==== bytes_in

type: int

The number of bytes of the request.

==== bytes_out

type: int

The number of bytes of the response.

==== dnstime

type: int

The time it takes to query the name server for a given request. This is typically used for RUM (real-user-monitoring) but can also have values for server to server communication when DNS is used for service discovery. The precision is in microseconds.


==== connecttime

type: int

The time it takes for the TCP connection to be established for the given transaction. The precision is in microseconds.


==== loadtime

type: int

The time it takes for the content to be loaded. This is typically used for RUM (real-user-monitoring) but it can make sense in other cases as well. The precision is in microseconds.


==== domloadtime

type: int

In RUM (real-user-monitoring), the total time it takes for the DOM to be loaded. In terms of W3 Navigation Timing API, this is the difference between `domContentLoadedEnd` and `domContentLoadedStart`.


[[exported-fields-env]]
=== Environmental fields

These fields contain data about the environment in which the transaction was captured.



==== shipper

The name of the shipper that captured the transaction.


==== server

The name of the server that served the transaction.


==== client_server

The name of the server that initiated the transaction.


==== service

The name of the logical service that served the transaction.


==== client_service

The name of the logical service that initiated the transaction.


==== ip

format: dotted notation.

The IP address of the server that served the transaction.


==== client_ip

format: dotted notation.

The IP address of the server that initiated the transaction.


==== real_ip

format: Dotted notation.

If the server initiating the transaction is a proxy, this field contains the original client IP address. For HTTP, for example, the IP address extracted from a configurable HTTP header, by default `X-Forwarded-For`.
Unless this field is disabled, it always has a value and it matches the `client_ip` for non proxy clients.


==== client_location

type: geo_point

example: 40.715, -74.011

The GeoIP location of the `real_ip` IP address or of the `client_ip` address if the `real_ip` is disabled. The field is a string containg the latitude and longitude separated by a coma.


==== client_port

format: dotted notation.

The layer 4 port of the process that initiated the transaction.


==== port

format: dotted notation.

The layer 4 port of the process that served the transaction.


==== proc

The name of the process that served the transaction.


==== client_proc

The name of the process that initiated the transaction.


==== release

The software release of the service serving the transaction. This can be the commit id or a semantic version.


==== tags

Arbitrary tags that can be set per shipper and per transaction type.


[[exported-fields-raw]]
=== Raw fields

These fields contain the raw transaction data.


==== request

For text protocols, this is the request as seen on the wire (application layer only). For binary protocols this is our representation of the request.


==== response

For text protocols, this is the response as seen on the wire (application layer only). For binary protocols this is our representation of the request.


